#################################################
## Specifies the Java directory factory class name. 
## Value must be the fully qualified name of the Java class. 
## The class must implement com.orchestranetworks.service.directory.DirectoryFactory.
##
## Change log:
##
## 2019-05-07 - there is a change in the value expected in two properties: ebx.directory.ldap.adminGroup and ebx.directory.ldap.readOnlyGroup
##				this change is not backward compatible. read notes for the properties.
##
## 2019-06-05 - added support for multiple ldap servers. user need to specify the list of server domain names in the "ebx.directory.ldap.domain.names" property.
##
##
##
##
#################################################
ebx.directory.factory=com.orchestranetworks.ps.customDirectory.LdapDirectoryFactory

#
# set this property to true to treat all passwords as encrypted.
# Only Passwords that were encrypted by the "Encryption Service" are supported.
# the "Encryption Service" can be accessed by Tech Admin only from the dataspace tab and Actions same place where Import "Dev Artifacts" is accessed 
#
ebx.directory.passwordencrypted=false

#################################################
# SSO properties
#################################################
# enable SSO 
ebx.directory.enableSSO=false

# alternate SSO class implementation - must extend com.orchestranetworks.ps.customDirectory.HttpAuthenticate
ebx.directory.SSOClass=

#
# Authenticate with EBX first if ebx.directory.authenticateWithEBXFirst is set to true. 
#
# ebx.directory.authenticateWithEBXFirst
#
# if "ebx.directory.enableLogin" is set to true, users that don't exist on Active Directory but do exist in EBX will be able to login. 
#
ebx.directory.enableLogin=true
#
# ebx.directory.enableProfileUpdate=true - user information in EBX will be updated 
# 										   with information from the Active Directory 
#
ebx.directory.enableProfileUpdate=true
#
# ebx.directory.enableUserCreation=true - if a valid user from ldap doesn't exist in EBX it will be created
#
ebx.directory.enableUserCreation=true

# URL to directory
ebx.directory.ldap.path=ldap://localhost:10389/
# ebx.directory.ldap.bindDN = user that is defined in LDAP to connect to the ldap server
# ebx.directory.ldap.credential = password for the bindN user
# ebx.directory.ldap.referral =  referral policy - what to do with referrals, ignore - ignore them, follow - follow them, throw - raise an error. default value is "follow"
ebx.directory.ldap.referral=ignore
# ebx.directory.ldap.ldapversion = supported ldap version by the ldap server. possible values 2, 3. default value is "3"
ebx.directory.ldap.ldapversion=2

# Point in tree under which to search for users
ebx.directory.ldap.baseDN=dc=example,dc=com
# for how long to keep a user in the cache. a negative number means do not use the cache.
ebx.directory.membershipCacheMs=-1

#
# optional multiple server support. comma separated list of domain names.
# When there is a need to connect to multiple ldap servers for ldap operations use ebx.directory.ldap.domain.names 
# with a comma delimited domain names. for example: us, uk, as etc. 
# when a user logins to ebx he will have to specify his domain name as part of the login id.
# for example "us\myUserName" where "us" is the domain name and "myUserName" is the login Id
# using this property requires that all LDAP properties are prefixed with the domain name.
# for example: us.ebx.directory.ldap.search= (&(objectClass=person)(uid={0})). this will be used to search for users in the "us" domain 
# ebx.directory.ldap.domain.names=

#
# ebx.directory.ldap.search - this query must return a user. otherwise authentication will fail.
# (objectClass=person) - search only for objects of type "person".
# (uid={0}) or (sAMAccountName={0}) - where a person have an attribute named "uid" or "sAMAccountName" with the value of {0}
# {0} - will be replaced with the user name from the EBX login page.
# if the Active Directory support the attribute "memberOf" on type "person" we can combine the query of checking if he belongs to a specific group
# and then we don't need "ebx.directory.ldap.requiredToLogin.role" and it's related attributes
# there are some case where you need to specify the domain and the hierarchy in the active directory 
# ebx.directory.ldap.search=(&(objectClass=person)(uid={0})(memberOf=cn=EBX_Users,ou=Group,ou=EBX,dc=example,dc=com))
ebx.directory.ldap.search= (&(objectClass=person)(uid={0})) 

# if this property is not specified the default will be the value of 
# {0} will be replaced with EBX userID, {1} with user LDAP DN, {2} with roleID
# EBX_Users should be replaced with the LDAP group name that is used to list the users who can login to EBX. 
ebx.directory.ldap.requiredToLogin.role=(&(objectClass=groupOfNames)(cn=EBX_Users)(member=uid={0}))

# no longer used.
# specify the query to validate that a user is a member of a specific group
# ebx.directory.ldap.requiredToLogin.membershipFilter=(&(objectClass=groupOfNames)(cn=EBX_Users)(member=uid={0}))

# specify the starting point in the LDAP hierarchy - dc - domain common name. if not specify @ebx.directory.ldap.baseDN is used. 
ebx.directory.ldap.requiredToLogin.membershipBase=dc=example,dc=com

# EBX administration user check - special case if defined. a member that belong to this group will be defined as EBX administrator
# in version prior to 2019-05-07 code was expecting an ldap name e.g. cn=groupName
# in version after 2019-05-07 code expects an ldap filter similar to what is set for "ebx.directory.ldap.requiredToLogin.role"
# example:  ebx.directory.ldap.adminGroup= (&(objectClass=groupOfNames)(cn=EBX_AdminGroupName)(member=uid={0}))
# ebx.directory.ldap.adminGroup=cn=myAdmin

# EBX read-only user check - special case if defined
# in version prior to 2019-05-07 code was expecting an ldap name e.g. cn=groupName
# in version after 2019-05-07 code expects an ldap filter similar to what is set for "ebx.directory.ldap.requiredToLogin.role"
# example:  ebx.directory.ldap.readOnlyGroup= (&(objectClass=groupOfNames)(cn=EBX_readOnlyGroupName)(member=uid={0}))
# ebx.directory.ldap.readOnlyGroup=cn=readonly


# ebx.directory.ldap.bindDN=uid=admin,ou=system
# ebx.directory.ldap.credential=secret


# those attributes will be mapped to either the default attributes list or to ne specified in 

# DEFAULT_EBX_USER_PATHS for "ebx.directory.ldap.userPaths"= { 
# DirectoryPaths._Directory_Users._Email,
# DirectoryPaths._Directory_Users._LastName, 
# DirectoryPaths._Directory_Users._FirstName,
# DirectoryPaths._Directory_Users._Salutation
#
# if other attribute are needed specify a comma delimited attribute paths and the matching (by position) ldap attribute
# first path will be mapped to first ldap attribute etc.
#
ebx.directory.ldap.ldapAttrib=mail,givenName,sn,,,,
#
# the value of this property will be added to the beginning of the EBX role name/id before comparing it to the DS group name.
# if EBX role name is "dataSteward" and the value of the property is "test_" then it will search for a group name of "test_dataSteward"
# this property can be combined with "ebx.directory.ldap.membershipRole.environementSuffix" 
#
ebx.directory.ldap.membershipRole.environmentPrefix=test_
#
# the value of this property will be added to the end of the EBX role name/id before comparing it to the DS group name.
# if EBX role name is "dataSteward" and the value of the property is "_test" then it will search for a group name of "dataSteward_test"
# this property can be combined with "ebx.directory.ldap.membershipRole.environementPrefix"   
#
ebx.directory.ldap.membershipRole.environmentSuffix=

#
# specify the baseDN for the search. where in the active directory / LDAP tree to start the search from.
#
ebx.directory.ldap.membershipBase=dc=example,dc=com

# search for a group that have a name = {2}. {2} is replaced with an ebx role name. 
# this will set the LDAP group info in case the membership filter need the qualified group infi.
ebx.directory.ldap.membershipRole=(&(objectClass=groupOfNames)(cn={2}))

# this check for a group with a specific user in it. {0} will be replace with the login id. {2} will be replace with the group info found from
# ebx.directory.ldap.membershipRole
#
ebx.directory.ldap.membershipFilter=(&({2})(member=uid={0}))
# ebx.directory.ldap.membershipFilter=(&(objectCategory=Person)(uid={0})(memberOf={2}))

# specify the attribute name for the user id. in Apache it is "uid" in Microsoft Active directory it is "sAMAccountName". if not specify "sAMAccountName" is the default. 
ebx.directory.ldap.userIdAttributeName=uid

# settings for getting the users that belong to a group
# set to true to enable this functionality
ebx.directory.ldap.implementsGetUsersInRole=true
# query string to get the ldap group that matches the role name. this accounts for ebx.directory.ldap.membershipRole.environmentPrefix and ebx.directory.ldap.membershipRole.environmentSuffix
# if specified
ebx.directory.ldap.usersInGroup=(&(objectClass=groupOfNames)(cn={0}))
# name of attribute in the group type for the users in the group. for apacheDS it is member, for Active Directory it is uniqueMember which is also the defualt 
ebx.directory.ldap.usersInGroupAttributeName=member

# will set the role specifier as the default role for new users
ebx.directory.whenCreateUser_setThis_defaultRole=EBX_MDM_Read

# setting a custom logger for LDAP and Custom Directory logging
#
# custom logger output file name - default is customLogger.log
#
ebx.customLogger.oututFileName=customLogger.log
ebx.customLogger.threshold=DEBUG
# specify the out put layout, default is "%d %-5p [%c{1}] %m%n"
ebx.customLogger.layout=%d %-5p [%c{1}] %m%n
# appender type can be File or Console. if Console it will be redirected to Kernel log. for File it will be redirected to {ebx.customLogger.oututFileName}  
ebx.customLogger.appenderType=File
# specify a category name 
ebx.customLogger.categoryName=LDAP LOG
# specify the date time format to use for the daily rolled over log files. default "\'.\'yyyy-MM-dd"
ebx.customLogger.rollover.dateTime.pattern=


#################################################
